/* Generated by Opal 0.6.3 */
(function($opal) {
  var $a, $b, TMP_1, self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  if ($scope.RUBY_ENGINE['$==']("opal")) {};
  self.$include((($a = $opal.Object._scope.Asciidoctor) == null ? $opal.cm('Asciidoctor') : $a));
  return ($a = ($b = $scope.Extensions).$register, $a._p = (TMP_1 = function(){var self = TMP_1._s || this, $a, $b, TMP_2, $c, TMP_6;

  ($a = ($b = self).$inline_macro, $a._p = (TMP_2 = function(){var self = TMP_2._s || this, $a, $b, TMP_3;
      if (self.name == null) self.name = nil;

    self.$named("pick");
      self.$match(self.$resolve_regexp(self.name, "short"));
      return ($a = ($b = self).$process, $a._p = (TMP_3 = function(parent, target){var self = TMP_3._s || this, $a, $b, TMP_4, doc = nil, attrs = nil, valid_key = nil;
if (parent == null) parent = nil;if (target == null) target = nil;
      doc = parent.$document();
        attrs = ($scope.AttributeList.$new(target)).$parse();
        valid_key = ($a = ($b = attrs.$keys()).$find, $a._p = (TMP_4 = function(key){var self = TMP_4._s || this, $a, $b, TMP_5;
if (key == null) key = nil;
        if ((($a = $scope.String['$==='](key)) !== nil && (!$a._isBoolean || $a == true))) {
            } else {
            return false;
          };
          if ((($a = key['$include?'](".")) !== nil && (!$a._isBoolean || $a == true))) {
            return ($a = ($b = key.$split(".")).$find, $a._p = (TMP_5 = function(key_alt){var self = TMP_5._s || this;
if (key_alt == null) key_alt = nil;
            return doc['$attr?'](key_alt)}, TMP_5._s = self, TMP_5), $a).call($b)
            } else {
            return doc['$attr?'](key)
          };}, TMP_4._s = self, TMP_4), $a).call($b);
        if (valid_key !== false && valid_key !== nil) {
          return attrs['$[]'](valid_key)
          } else {
          return ""
        };}, TMP_3._s = self, TMP_3), $a).call($b);}, TMP_2._s = self, TMP_2), $a).call($b);
    return ($a = ($c = self).$inline_macro, $a._p = (TMP_6 = function(){var self = TMP_6._s || this, $a, $b, TMP_7;

    return ($a = ($b = self).$process, $a._p = (TMP_7 = function(parent, target, attributes){var self = TMP_7._s || this, $a, $b, TMP_8, doc = nil, valid_key = nil;
if (parent == null) parent = nil;if (target == null) target = nil;if (attributes == null) attributes = nil;
      doc = parent.$document();
        valid_key = ($a = ($b = target.$split("@")).$find_index, $a._p = (TMP_8 = function(key){var self = TMP_8._s || this, $a, $b, TMP_9;
if (key == null) key = nil;
        if ((($a = key['$include?'](",")) !== nil && (!$a._isBoolean || $a == true))) {
            return ($a = ($b = key.$split(",")).$find, $a._p = (TMP_9 = function(key_alt){var self = TMP_9._s || this;
if (key_alt == null) key_alt = nil;
            return doc['$attr?'](key_alt)}, TMP_9._s = self, TMP_9), $a).call($b)
            } else {
            return doc['$attr?'](key)
          }}, TMP_8._s = self, TMP_8), $a).call($b);
        if (valid_key !== false && valid_key !== nil) {
          return attributes['$[]'](valid_key['$+'](1))
          } else {
          return ""
        };}, TMP_7._s = self, TMP_7), $a).call($b)}, TMP_6._s = self, TMP_6), $a).call($c, "pick2");}, TMP_1._s = self, TMP_1), $a).call($b);
})(Opal);
